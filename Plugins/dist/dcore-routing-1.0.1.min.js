var dcore;!function(dcore){var plugins;!function(plugins){var routing;!function(routing){"use strict";var UrlHash=function(){function UrlHash(){this.questionMarkIndex=-1,this.url="",this.tokens=[],this.queryParams=[]}return Object.defineProperty(UrlHash.prototype,"value",{get:function(){return this.url},set:function(url){url=url||"",this.url=url,this.questionMarkIndex=url.indexOf("?"),this.queryParams=[],this.tokens=[],this.populateQueryParams(),this.populateTokens()},enumerable:!0,configurable:!0}),UrlHash.prototype.anyQueryParams=function(){return this.questionMarkIndex>-1},UrlHash.prototype.populateQueryParams=function(){var _this=this;this.anyQueryParams()&&(this.queryParams=this.value.substring(this.questionMarkIndex+1).split("&").map(function(keyValuePairString){return _this.parseQueryParam(keyValuePairString)}))},UrlHash.prototype.parseQueryParam=function(keyValuePair){var args=keyValuePair.split("=");return{key:args[0],value:args[1]||""}},UrlHash.prototype.populateTokens=function(){var valueWithoutQuery=this.getValueWithoutQuery();this.tokens=valueWithoutQuery.split("/").filter(function(token){return""!==token})},UrlHash.prototype.getValueWithoutQuery=function(){return this.anyQueryParams()?this.value.substring(0,this.value.length-(this.value.length-this.questionMarkIndex)):this.value},UrlHash}();routing.UrlHash=UrlHash}(routing=plugins.routing||(plugins.routing={}))}(plugins=dcore.plugins||(dcore.plugins={}))}(dcore||(dcore={}));var dcore;!function(dcore){var plugins;!function(plugins){var routing;!function(routing){"use strict";var routeParamRegex=/{([a-zA-Z]+)}/,Route=function(){function Route(pattern,onStart){this.tokens=[];var errorMsg="Route registration failed:";if("string"!=typeof pattern)throw new TypeError(errorMsg+" pattern should be non empty string.");if("function"!=typeof onStart)throw new TypeError(errorMsg+" callback should be a function.");this.pattern=pattern,this.callback=onStart,this.populateTokens()}return Route.prototype.getTokens=function(){return this.tokens.slice(0)},Route.prototype.equals=function(hashUrl){if(this.tokens.length!==hashUrl.tokens.length)return!1;for(var i=0,len=this.tokens.length;i<len;i++){var token=this.tokens[i],urlToken=hashUrl.tokens[i];if(!token.isDynamic&&token.name.toLowerCase()!==urlToken.toLowerCase())return!1}return!0},Route.prototype.start=function(urlHash){if(this.queryParams=Object.freeze(this.getParamsFromUrl(urlHash)),this.callback)try{this.callback(this.queryParams)}catch(error){console.error("Couldn't start "+urlHash.value+" route due to:"),console.error(error)}},Route.prototype.populateTokens=function(){var _this=this;this.tokens=[],this.pattern.split("/").forEach(function(urlFragment){""!==urlFragment&&_this.tokens.push(_this.parseToken(urlFragment))})},Route.prototype.parseToken=function(urlFragment){var paramMatchGroups=routeParamRegex.exec(urlFragment),isDynamic=!!paramMatchGroups;return{name:isDynamic?paramMatchGroups[1]:urlFragment,isDynamic:isDynamic}},Route.prototype.getParamsFromUrl=function(url){var result=this.getQueryParamsFromUrl(url);return this.tokens.forEach(function(token,index){token.isDynamic&&(result[token.name]=url.tokens[index])}),result},Route.prototype.getQueryParamsFromUrl=function(url){var result={};return url.queryParams.forEach(function(param){return result[param.key]=param.value}),result},Route}();routing.Route=Route}(routing=plugins.routing||(plugins.routing={}))}(plugins=dcore.plugins||(dcore.plugins={}))}(dcore||(dcore={}));var dcore;!function(dcore){var plugins;!function(plugins){var routing;!function(routing){"use strict";function findRoute(){for(var i=0,len=this.routes.length;i<len;i++){var route=this.routes[i];if(route.equals(this.urlHash))return route}return null}function startDefaultRoute(invalidHash){window.history.replaceState(null,null,window.location.pathname+"#"+this.defaultUrl),this.urlHash.value=this.defaultUrl,this.currentRoute=findRoute.call(this),this.currentRoute?this.currentRoute.start(this.urlHash):console.warn("No route handler for "+invalidHash)}var RouteConfig=function(){function RouteConfig(){this.routes=[],this.urlHash=new routing.UrlHash,this.defaultUrl=null}return RouteConfig.prototype.register=function(pattern,callback){if(this.routes.some(function(r){return r.pattern===pattern}))throw new Error("Route "+pattern+" has been already registered.");return this.routes.push(new routing.Route(pattern,callback)),this},RouteConfig.prototype.startRoute=function(hash){return this.urlHash.value=hash,this.currentRoute=findRoute.call(this),this.currentRoute?void this.currentRoute.start(this.urlHash):void("string"==typeof this.defaultUrl?startDefaultRoute.call(this,hash):console.warn("No route matches "+hash))},RouteConfig.prototype.getCurrentRoute=function(){return{pattern:this.currentRoute?this.currentRoute.pattern:null,params:this.currentRoute?this.currentRoute.queryParams:null}},RouteConfig.prototype.getRoutes=function(){return this.routes.map(function(route){return route.pattern})},RouteConfig.prototype.hasRoutes=function(){return this.routes.length>0},RouteConfig}();routing.RouteConfig=RouteConfig}(routing=plugins.routing||(plugins.routing={}))}(plugins=dcore.plugins||(dcore.plugins={}))}(dcore||(dcore={}));var dcore;!function(dcore){"use strict";function sandboxGetCurrentRoute(){return this.core.routing.getCurrentRoute()}function sandboxGo(url){location.hash=url}function handleRoute(){this.routing.startRoute(global.location.hash.substring(1))}var routing=dcore.plugins.routing,global=window;dcore.Instance.prototype.useRouting=function(){var that=this;that.routing||(that.routing=new routing.RouteConfig,that.Sandbox.prototype.getCurrentRoute=sandboxGetCurrentRoute,that.Sandbox.prototype.go=sandboxGo,that.hook(dcore.HookType.Core_DOMReady,function(){that.routing.hasRoutes()&&global.addEventListener("hashchange",handleRoute.bind(that))}))}}(dcore||(dcore={}));